// Copyright 2024 Tamás Gulácsi. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
	"strconv"
	"strings"

	oracall "github.com/tgulacsi/oracall/lib"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/reflect/protoregistry"
	// "google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/dynamicpb"
	"google.golang.org/protobuf/types/pluginpb"
)

func main() {
	if err := Main(); err != nil {
		log.Fatal(err)
	}
}

func Main() error {
	// Protoc passes pluginpb.CodeGeneratorRequest in via stdin
	// marshalled with Protobuf
	input, err := io.ReadAll(os.Stdin)
	if err != nil {
		return fmt.Errorf("slurp stdin: %w", err)
	}
	var req pluginpb.CodeGeneratorRequest
	proto.Unmarshal(input, &req)

	// Initialise our plugin with default options
	opts := protogen.Options{}
	plugin, err := opts.New(&req)
	if err != nil {
		panic(err)
	}

	// https://github.com/golang/protobuf/issues/1260
	// The type information for all extensions is in the source files,
	// so we need to extract them into a dynamically created protoregistry.Types.
	extTypes := new(protoregistry.Types)
	for _, file := range plugin.Files {
		if err := registerAllExtensions(extTypes, file.Desc); err != nil {
			return fmt.Errorf("registerAllExtensions: %w", err)
		}
	}

	// Protoc passes a slice of File structs for us to process
	for _, file := range plugin.Files {
		// log.Printf("? %q", file.GoImportPath.String())
		if strings.HasPrefix(file.GoImportPath.String(), `"google.golang.org/`) {
			log.Println("skip", file.GoImportPath.String())
			continue
		}

		// Time to generate code...!
		var buf bytes.Buffer

		// 2. Write the package name
		fmt.Fprintf(&buf, "// Code generated by protoc-gen-oracall. DO NOT EDIT!\n\npackage %s\n\n", file.GoPackageName)

		for _, msg := range file.Messages {
			objectType, err := getCustomOption(extTypes, msg.Desc.Options(), "oracall_object_type")
			if err != nil {
				return err
			}
			msgName := msg.Desc.Name()
			fmt.Fprintf(&buf, "\n// %q=%q\nfunc(%s) ObjecTypeName() string { return %q }\n",
				msgName, objectType,
				msgName, objectType,
			)
			fmt.Fprintf(&buf, "func (%s) FieldTypeName(f string) string{\n\tswitch f {\n", msg.Desc.Name())
			fields := msg.Desc.Fields()
			for i := range fields.Len() {
				f := fields.Get(i)
				fieldName := string(f.Name())
				fieldType, err := getCustomOption(extTypes, f.Options(), "oracall_field_type")
				if err != nil {
					return err
				}
				fmt.Fprintf(&buf, "\t\t// %q.%q = %q\n\t\tcase %q, %q: return %q\n",
					msgName, oracall.CamelCase(fieldName), fieldType,
					fieldName, oracall.CamelCase(fieldName), fieldType,
				)
			}
			fmt.Fprintf(&buf, "}\n\treturn \"\"\n}\n")
		}

		// 4. Specify the output filename, in this case test.foo.go
		filename := file.GeneratedFilenamePrefix + ".oracall.go"
		file := plugin.NewGeneratedFile(filename, ".")

		// 5. Pass the data from our buffer to the plugin file struct
		out, err := format.Source(buf.Bytes())
		if err != nil {
			return err
		}
		file.Write(out)
	}

	// Generate a response from our plugin and marshall as protobuf
	stdout := plugin.Response()
	out, err := proto.Marshal(stdout)
	if err != nil {
		return err
	}

	// Write the response to stdout, to be picked up by protoc
	_, err = os.Stdout.Write(out)
	return err
}

func getCustomOption(extTypes *protoregistry.Types, options protoreflect.ProtoMessage, name string) (protoreflect.Value, error) {
	var value protoreflect.Value
	err := iterCustomOptions(extTypes, options, func(fd protoreflect.FieldDescriptor, v protoreflect.Value) error {
		if string(fd.Name()) == name {
			value = v
		}
		return nil
	})
	return value, err
}
func iterCustomOptions(extTypes *protoregistry.Types, options protoreflect.ProtoMessage, f func(protoreflect.FieldDescriptor, protoreflect.Value) error) error {
	// The MessageOptions as provided by protoc does not know about
	// dynamically created extensions, so they are left as unknown fields.
	// We round-trip marshal and unmarshal the options with
	// a dynamically created resolver that does know about extensions at runtime.
	// options := msg.Desc.Options().(*descriptorpb.MessageOptions)
	b, err := proto.Marshal(options)
	if err != nil {
		return fmt.Errorf("Marshal(%#v): %w", options, err)
	}
	options.(interface{ Reset() }).Reset()
	err = proto.UnmarshalOptions{Resolver: extTypes}.Unmarshal(b, options)
	if err != nil {
		return fmt.Errorf("Unmarshal: %w", err)
	}

	// Use protobuf reflection to iterate over all the extension fields,
	// looking for the ones that we are interested in.
	options.ProtoReflect().Range(func(fd protoreflect.FieldDescriptor, v protoreflect.Value) bool {
		if !fd.IsExtension() {
			return true
		}
		if err = f(fd, v); err != nil {
			return false
		}
		// Make use of fd and v based on their reflective properties.
		return true
	})
	return err
}

// https://github.com/golang/protobuf/issues/1260
func registerAllExtensions(extTypes *protoregistry.Types, descs interface {
	Messages() protoreflect.MessageDescriptors
	Extensions() protoreflect.ExtensionDescriptors
}) error {
	mds := descs.Messages()
	for i := 0; i < mds.Len(); i++ {
		registerAllExtensions(extTypes, mds.Get(i))
	}
	xds := descs.Extensions()
	for i := 0; i < xds.Len(); i++ {
		if err := extTypes.RegisterExtension(dynamicpb.NewExtensionType(xds.Get(i))); err != nil {
			return err
		}
	}
	return nil
}
