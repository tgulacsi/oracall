// Copyright 2024 Tamás Gulácsi. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"log"
	"os"
	"strconv"
	"strings"

	oracall "github.com/tgulacsi/oracall/lib"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/reflect/protoregistry"
	// "google.golang.org/protobuf/types/descriptorpb"
	"google.golang.org/protobuf/types/dynamicpb"
	"google.golang.org/protobuf/types/pluginpb"
)

func main() {
	if err := Main(); err != nil {
		log.Fatal(err)
	}
}

func Main() error {
	// Protoc passes pluginpb.CodeGeneratorRequest in via stdin
	// marshalled with Protobuf
	input, err := io.ReadAll(os.Stdin)
	if err != nil {
		return fmt.Errorf("slurp stdin: %w", err)
	}
	var req pluginpb.CodeGeneratorRequest
	proto.Unmarshal(input, &req)

	// Initialise our plugin with default options
	opts := protogen.Options{}
	plugin, err := opts.New(&req)
	if err != nil {
		panic(err)
	}

	// https://github.com/golang/protobuf/issues/1260
	// The type information for all extensions is in the source files,
	// so we need to extract them into a dynamically created protoregistry.Types.
	extTypes := new(protoregistry.Types)
	for _, file := range plugin.Files {
		if err := registerAllExtensions(extTypes, file.Desc); err != nil {
			return fmt.Errorf("registerAllExtensions: %w", err)
		}
	}

	// Protoc passes a slice of File structs for us to process
	for _, file := range plugin.Files {
		// log.Printf("? %q", file.GoImportPath.String())
		if strings.HasPrefix(file.GoImportPath.String(), `"google.golang.org/`) {
			log.Println("skip", file.GoImportPath.String())
			continue
		}

		// Time to generate code...!
		var buf, tBuf bytes.Buffer

		// 2. Write the package name
		fmt.Fprintf(&buf, `// Code generated by protoc-gen-oracall. DO NOT EDIT!
package %s

import (
	"context"
	"fmt"
	"io"
	"strings"
		
	"github.com/godror/godror"
	"google.golang.org/protobuf/types/known/timestamppb"
)

var (
	_ context.Context
	_ = io.ReadAll
	_ strings.Builder
	_ = timestamppb.New
	_ godror.Number
)

`, file.GoPackageName)

		fmt.Fprintf(&tBuf, `// Code generated by protoc-gen-oracall. DO NOT EDIT!
package %s_test

import (
	"context"
	"database/sql"
	"os"
	"sync"
	"testing"
	"time"
		
	"google.golang.org/protobuf/types/known/timestamppb"
	"github.com/google/go-cmp/cmp"
	"google.golang.org/protobuf/encoding/protojson"

	_ "github.com/godror/godror"

	%s
)

var (
	_ context.Context
	_ = timestamppb.New
	_ = cmp.Diff
)

var db *sql.DB
var dbOnce sync.Once
func getTx(ctx context.Context) (*sql.Tx, error) {
	var err error
	dbOnce.Do(func() { db, err = sql.Open("godror", os.Getenv("BRUNO_ID")) })
	if err != nil { return nil, err }
	return db.BeginTx(ctx, nil)
}
`, file.GoPackageName, file.GoImportPath)

		msgs := make([]message, 0, len(file.Messages))
		for _, msg := range file.Messages {
			objectType, err := getCustomOption(extTypes, msg.Desc.Options(), "oracall_object_type")
			if err != nil {
				return err
			}
			fields := msg.Desc.Fields()
			m := message{
				Name: string(msg.Desc.Name()), DBType: objectType.String(),
				Fields: make([]nameType, 0, fields.Len()),
			}
			for i := range fields.Len() {
				f := fields.Get(i)
				fieldType, err := getCustomOption(extTypes, f.Options(), "oracall_field_type")
				if err != nil {
					return err
				}
				nativeType := f.Kind().String()
				switch nativeType {
				case "float":
					nativeType = "float32"
				case "double":
					nativeType = "float64"
				case "message":
					switch nativeType = string(f.Message().FullName()); nativeType {
					case "google.protobuf.Timestamp":
						nativeType = "*timestamppb.Timestamp"
					}
				}
				m.Fields = append(m.Fields, nameType{
					Name: string(f.Name()), DBType: fieldType.String(),
					NativeType: nativeType,
					Repeated:   f.Cardinality() == protoreflect.Repeated,
				})
			}
			msgs = append(msgs, m)
		}

		for _, msg := range msgs {
			msg.writeTypeNames(&buf)
			msg.writeToFrom(&buf, &tBuf, string(file.GoPackageName))
		}

		for _, it := range []struct {
			fn  string
			buf *bytes.Buffer
		}{
			{"oracall", &buf}, {"oracall_test", &tBuf},
		} {
			// 4. Specify the output filename, in this case test.foo.go
			filename := file.GeneratedFilenamePrefix + "." + it.fn + ".go"
			file := plugin.NewGeneratedFile(filename, ".")

			// 5. Pass the data from our buffer to the plugin file struct
			out, err := format.Source(it.buf.Bytes())
			if err != nil {
				return fmt.Errorf("%s\n%w", it.buf.String(), err)
			}
			if _, err := file.Write(out); err != nil {
				return fmt.Errorf("write %q: %w", filename, err)
			}
		}
	}

	// Generate a response from our plugin and marshall as protobuf
	stdout := plugin.Response()
	out, err := proto.Marshal(stdout)
	if err != nil {
		return err
	}

	// Write the response to stdout, to be picked up by protoc
	_, err = os.Stdout.Write(out)
	return err
}

func (msg message) writeToFrom(w, tW io.Writer, pkg string) {
	FieldName := func(f nameType) string {
		fieldName := oracall.CamelCase(f.Name)
		if fieldName == "Size" {
			fieldName += "_"
		}
		return fieldName
	}
	// ToObject
	fmt.Fprintf(w, `func (x %s) ToObject(ctx context.Context, ex godror.Execer) (*godror.Object, error) {
	objT, err := godror.GetObjectType(ctx, ex, %q)
	if err != nil {
		return nil, fmt.Errorf("GetObjectType(%s): %%w", err)
	}
	obj, err := objT.NewObject()
	if err != nil {
		objT.Close(); 
		return nil, err
	}
	var d godror.Data
	if err := func() error {
`,
		msg.Name,
		msg.DBType,
		strings.ReplaceAll(msg.DBType, "%", "%%"),
	)
	for _, f := range msg.Fields {
		var fun, conv, getValue string
		switch typ, post, _ := strings.Cut(f.DBType, "("); typ {
		case "DATE", "TIMESTAMP":
			fun, conv = "Time", "%s.AsTime()"
		case "CHAR", "VARCHAR2", "LONG", "PL/SQL ROWID", "CLOB":
			fun, conv = "Bytes", "[]byte(%s)"
		case "RAW", "LONG RAW", "BLOB":
			fun = "Bytes"
		case "PL/SQL PLS INTEGER", "PL/SQL BINARY INTEGER":
			fun, conv = "Int64", "int64(%s)"
		case "PL/SQL BOOLEAN":
			fun = "Bool"
		case "BINARY_DOUBLE":
			fun = "Float64"
		case "NUMBER", "INTEGER":
			if post != "" {
				precS, scaleS, _ := strings.Cut(post[:len(post)-1], ",")
				if precS != "*" {
					prec, err := strconv.Atoi(precS)
					if err != nil {
						panic(fmt.Errorf("parse %q as precision from %q: %w", precS, f.DBType, err))
					}
					if scaleS == "0" || scaleS == "" {
						if prec < 10 {
							fun, conv = "Int64", "int64(%s)"
						} else if prec < 20 {
							fun = "Int64"
						}
					} else if _, err := strconv.Atoi(scaleS); err != nil {
						panic(fmt.Errorf("parse %q as scale from %q: %w", scaleS, f.DBType, err))
					} else if prec < 8 {
						fun = "Float32"
					} else if prec < 16 {
						fun = "Float64"
					}
				}
			}
			if fun == "" {
				fun, conv = "Bytes", "[]byte(%s)"
			}
		case "XMLTYPE", "TEST_SUBTYPECLOSE_LT":

		default:
			if strings.IndexByte(typ, '.') < 0 { // Object
				panic(fmt.Errorf("unknown type %q (%q)", typ, f.DBType))
			}
		}

		if conv == "" {
			conv = "%s"
		}
		fieldName := FieldName(f)
		if !f.Repeated {
			if getValue == "" {
				getValue = fmt.Sprintf(conv, "x.%s")
			}
			getValue = fmt.Sprintf(getValue, fieldName)
			fmt.Fprintf(w, "d.Set%s(%s)\n", fun, getValue)
		} else {
			if getValue == "" {
				getValue = fmt.Sprintf(conv, "e")
			} else {
				getValue = fmt.Sprintf(getValue, "e")
			}
			fmt.Fprintf(w, `
		OT, err := godror.GetObjectType(ctx, ex, %q)
		if err != nil {return fmt.Errorf("NewObjectType(%s): %%w", err)}
		O, err := OT.NewObject()
		if err != nil {OT.Close(); return fmt.Errorf("NewObject(%s): %%w", err)}
		C := O.Collection()
		for _, e := range x.%s {
			d.Set%s(%s)
			if err = C.AppendData(&d); err != nil {
				O.Close()
				OT.Close()
				return fmt.Errorf("AppendData(%s): %%w", err)
			}
		}
		d.SetObject(C.Object)
	`,
				f.DBType, f.DBType,
				strings.ReplaceAll(f.DBType, "%", "%%"),
				fieldName,
				fun, getValue,
				strings.ReplaceAll(f.DBType, "%", "%%"),
			)
		}
		fmt.Fprintf(w, `if err := obj.SetAttribute(%q, &d); err != nil {
		return fmt.Errorf("SetAttribute(%s): %%w", err)
	}
`,
			strings.ToUpper(f.Name),
			strings.ToUpper(f.Name),
		)
	}

	fmt.Fprintf(w, `
		return nil
	}(); err != nil { 
		obj.Close(); objT.Close(); 
		return nil, err 
	}
	return obj, nil
}
`)

	// FromObject
	fmt.Fprintf(w, "func (x *%s) FromObject(obj *godror.Object) error {\nvar d godror.Data\nx.Reset()\n", msg.Name)
	for _, f := range msg.Fields {
		nm := strings.ToUpper(oracall.SnakeCase(f.Name))
		fmt.Fprintf(w, "\tif err := obj.GetAttribute(&d, %q); err != nil {return fmt.Errorf(\"Get(%s): %%w\", err)}\n\tif !d.IsNull() {\n", nm, nm)
		var fun, conv, getValue string
		switch typ, post, _ := strings.Cut(f.DBType, "("); typ {
		case "DATE", "TIMESTAMP":
			fun, conv = "Time", "timestamppb.New"
		case "CHAR", "VARCHAR2", "LONG", "PL/SQL ROWID":
			fun, conv = "Bytes", "string"
		case "RAW", "LONG RAW":
			fun = "Bytes"
		case "BLOB":
			getValue = "v, err := io.ReadAll(d.GetLob()); if err != nil {return err}"
		case "CLOB":
			getValue = "var buf strings.Builder; if _, err := io.Copy(&buf, d.GetLob()); err != nil {return err}; v := buf.String()"
		case "PL/SQL PLS INTEGER", "PL/SQL BINARY INTEGER":
			fun, conv = "Int64", "int32"
		case "PL/SQL BOOLEAN":
			fun = "Bool"
		case "BINARY_DOUBLE":
			fun = "Float64"
		case "NUMBER", "INTEGER":
			if post != "" {
				precS, scaleS, _ := strings.Cut(post[:len(post)-1], ",")
				if precS != "*" {
					prec, err := strconv.Atoi(precS)
					if err != nil {
						panic(fmt.Errorf("parse %q as precision from %q: %w", precS, f.DBType, err))
					}
					if scaleS == "0" || scaleS == "" {
						if prec < 10 {
							fun, conv = "Int64", "int32"
						} else if prec < 20 {
							fun = "Int64"
						}
					} else if _, err := strconv.Atoi(scaleS); err != nil {
						panic(fmt.Errorf("parse %q as scale from %q: %w", scaleS, f.DBType, err))
					} else if prec < 8 {
						fun = "Float32"
					} else if prec < 16 {
						fun = "Float64"
					}
				}
			}
			if fun == "" {
				fun, conv = "Bytes", "string"
			}
		case "XMLTYPE", "TEST_SUBTYPECLOSE_LT":

		default:
			if strings.IndexByte(typ, '.') < 0 { // Object
				panic(fmt.Errorf("unknown type %q (%q)", typ, f.DBType))
			}
		}
		fieldName := FieldName(f)
		if !(getValue == "" && fun == "") {
			if getValue == "" {
				getValue = fmt.Sprintf("v := %s(d.Get%s())", conv, fun)
			} else if strings.Contains(getValue, "%") {
				getValue = fmt.Sprintf(getValue, fieldName)
			}
			if !f.Repeated {
				fmt.Fprintf(w, "%s\nx.%s = v\n", getValue, fieldName)
			} else {
				fmt.Fprintf(w, `O := d.GetObject().Collection()
	length, err := O.Len()
	if err != nil { return err }
	x.%s = make([]%s, 0, length)
	for i, err := O.First(); err == nil; i, err = O.Next(i) {
		if O.CollectionOf.IsObject() {
			d.ObjectType = O.CollectionOf
		}
		if err = O.GetItem(&d, i); err != nil {
			return err
		}
		%s
		x.%s = append(x.%s, v)
	}
`,
					fieldName, f.NativeType,
					getValue,
					fieldName, fieldName,
				)
			}
		} else if strings.IndexByte(f.DBType, '.') >= 0 {

		} else {
			// panic(fmt.Errorf("not implemented (%q)", f.Type))
		}
		fmt.Fprintf(w, "}\n")
	}
	fmt.Fprintf(w, "\treturn nil\n}\n")

	fmt.Fprintf(tW, `func TestToFromObject_%s(t *testing.T) {
	ctx, cancel := context.WithTimeout(context.Background(), 15*time.Second)
	defer cancel()
	tx, err := getTx(ctx)
	if err != nil { t.Fatal(err) }
	defer tx.Rollback()
	var want, got %s.%s
	wantJ, err := protojson.Marshal(&want)
	if err != nil { t.Fatalf("protojson.Marshal(%s): %%+v", err)}
	obj, err := want.ToObject(ctx, tx)
	if err != nil { t.Fatalf("%s.ToObject: %%+v", err)}
	if err = got.FromObject(obj); err != nil { t.Fatalf("%s.FromObject: %%+v", err) }
	gotJ, err := protojson.Marshal(&got)
	if err != nil { t.Fatalf("protojson.Marshal(%s): %%+v", err)}
	if d := cmp.Diff(string(wantJ), string(gotJ)); d != "" { t.Error(d) }
	`,
		msg.Name,
		pkg, msg.Name,
		msg.Name,
		msg.Name,
		msg.Name,
		msg.Name,
	)
	fmt.Fprintf(tW, "}\n")
}

func (msg message) writeTypeNames(w io.Writer) {
	fmt.Fprintf(w, "\n// %q=%q\nfunc(%s) ObjecTypeName() string { return %q }\n",
		msg.Name, msg.DBType,
		msg.Name, msg.DBType,
	)
	fmt.Fprintf(w, "func (%s) FieldTypeName(f string) string{\n\tswitch f {\n", msg.Name)
	for _, field := range msg.Fields {
		fmt.Fprintf(w, "\t\t// %q.%q = %q\n\t\tcase %q, %q: return %q\n",
			msg.Name, oracall.CamelCase(field.Name), field.DBType,
			field.Name, oracall.CamelCase(field.Name), field.DBType,
		)
	}
	fmt.Fprintf(w, "}\n\treturn \"\"\n}\n")
}

func getCustomOption(extTypes *protoregistry.Types, options protoreflect.ProtoMessage, name string) (protoreflect.Value, error) {
	var value protoreflect.Value
	err := iterCustomOptions(extTypes, options, func(fd protoreflect.FieldDescriptor, v protoreflect.Value) error {
		if string(fd.Name()) == name {
			value = v
		}
		return nil
	})
	return value, err
}
func iterCustomOptions(extTypes *protoregistry.Types, options protoreflect.ProtoMessage, f func(protoreflect.FieldDescriptor, protoreflect.Value) error) error {
	// The MessageOptions as provided by protoc does not know about
	// dynamically created extensions, so they are left as unknown fields.
	// We round-trip marshal and unmarshal the options with
	// a dynamically created resolver that does know about extensions at runtime.
	// options := msg.Desc.Options().(*descriptorpb.MessageOptions)
	b, err := proto.Marshal(options)
	if err != nil {
		return fmt.Errorf("Marshal(%#v): %w", options, err)
	}
	options.(interface{ Reset() }).Reset()
	err = proto.UnmarshalOptions{Resolver: extTypes}.Unmarshal(b, options)
	if err != nil {
		return fmt.Errorf("Unmarshal: %w", err)
	}

	// Use protobuf reflection to iterate over all the extension fields,
	// looking for the ones that we are interested in.
	options.ProtoReflect().Range(func(fd protoreflect.FieldDescriptor, v protoreflect.Value) bool {
		if !fd.IsExtension() {
			return true
		}
		if err = f(fd, v); err != nil {
			return false
		}
		// Make use of fd and v based on their reflective properties.
		return true
	})
	return err
}

// https://github.com/golang/protobuf/issues/1260
func registerAllExtensions(extTypes *protoregistry.Types, descs interface {
	Messages() protoreflect.MessageDescriptors
	Extensions() protoreflect.ExtensionDescriptors
}) error {
	mds := descs.Messages()
	for i := 0; i < mds.Len(); i++ {
		registerAllExtensions(extTypes, mds.Get(i))
	}
	xds := descs.Extensions()
	for i := 0; i < xds.Len(); i++ {
		if err := extTypes.RegisterExtension(dynamicpb.NewExtensionType(xds.Get(i))); err != nil {
			return err
		}
	}
	return nil
}

type (
	nameType struct {
		Name, NativeType, DBType string
		Repeated                 bool
	}

	message struct {
		Name, DBType string
		Fields       []nameType
	}
)
